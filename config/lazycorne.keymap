#include <dt-bindings/zmk/outputs.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define CONFIG_WIRELESS 1

#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#define HOST_OS 1
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/german.dtsi"

/* layer and key shortcuts */
#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define SYS 4
#define UC 5
#define MOUSE 6
#define MOUSEVS 7
#define MOUSEHS 8

#include "mouse.dtsi"
#include "combos.dtsi"

#define XXX &none
#define ___ &trans


/* Global settings */


/{
  cirque_mmv {
    compatible = "zmk,input-behavior-listener";
    device = <&vtrackpad>;
    layers= <DEF MOUSE>;
    evt-type = <INPUT_EV_REL>;
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    scale-multiplier = <2>;
    scale-divisor = <1>;
    bindings = <&ib_tog_layer MOUSE>;
    y-invert;
  }; 
  cirque_scl {
    compatible = "zmk,input-behavior-listener";
    device = <&vtrackpad>;
    layers = <MOUSEVS>;
    evt-type = <INPUT_EV_REL>;
    
    /* slienting x-axis with alt event code */
    x-input-code = <INPUT_REL_MISC>;
    y-input-code = <INPUT_REL_WHEEL>;

    /* invent scrolling direction */
    y-invert;
    bindings = <&ib_wheel_scaler 1 16>;
  };
  cirque_hscl {
    compatible = "zmk,input-behavior-listener";
    device = <&vtrackpad>;
    layers = <MOUSEHS>;
    evt-type = <INPUT_EV_REL>;
    
    /* slienting x-axis with alt event code */
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_MISC>;

    /* invent scrolling direction */
    // y-invert;
    x-invert;
    bindings = <&ib_hwheel_scaler 1 16>;
  };
  // 아직 기능이 완벽하지 않음 터치를 하는동안 인식하는것이 아니라 움직임이 나타나야 인지함
  ib_tog_layer: ib_tog_layer {
    compatible = "zmk,input-behavior-tog-layer";
    #binding-cells = <1>;
    time-to-live-ms = <2500>;
  };
  ib_wheel_scaler: ib_wheel_scaler {
    compatible = "zmk,input-behavior-scaler";
    #binding-cells = <2>;
    evt-type = <INPUT_EV_REL>;
    input-code = <INPUT_REL_WHEEL>;
  };

  ib_hwheel_scaler: ib_hwheel_scaler {
    compatible = "zmk,input-behavior-scaler";
    #binding-cells = <2>;
    evt-type = <INPUT_EV_REL>;
    input-code = <INPUT_REL_HWHEEL>;
  };
  
};


// smart-mouse, requires PR #1366
ZMK_TRI_STATE(smart_mouse,
    bindings = <&ib_tog_layer MOUSE>, <&ib_tog_layer MOUSE>, <&to DEF>;
    ignored-key-positions = <LT1 LT2 LM1 LM2 LM3 LM4 LH0 LH1 LH2>;
    ignored-layers = <MOUSE MOUSEVS MOUSEHS>;
)

/* Custom behaviors */

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(tabesctap, tap_dance,
    tapping-term-ms = <170>;
    bindings = <&kp TAB>, <&kp ESCAPE>;
)

ZMK_BEHAVIOR(spacelayer, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <400>;
    bindings = <&mo>, <&kp>;
)

ZMK_BEHAVIOR(shiftmonum, tap_dance,
    tapping-term-ms = <250>;
    bindings = <&kp LEFT_SHIFT>, <&mo 3>;
)

ZMK_MACRO(tog_mousev,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&smart_mouse>
             , <&macro_press &mo MOUSEVS>
             , <&macro_pause_for_release>
             , <&macro_release &mo MOUSEVS>;
)

ZMK_MACRO(tog_mouseh,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&smart_mouse>
             , <&macro_press &mo MOUSEHS>
             , <&macro_pause_for_release>
             , <&macro_release &mo MOUSEHS>;
)


// reuse basic mod-morph scheme
/* Keymap */

ZMK_CONDITIONAL_LAYER(FN NUM, SYS)  // FN + NUM --> SYS
// ZMK_CONDITIONAL_LAYER(NAV FN, MOUSE)  // FN + NUM --> SYS

/* keymap */

ZMK_LAYER(DEF,
    &tabesctap      &kp Q  &kp W  &kp E     &kp R                &kp T          &kp Y  &kp U        &kp I      &kp O    &kp P     &kp BSPC
    &kp LCTRL       &kp A  &kp S  &kp D     &kp F                &kp G          &kp H  &kp J        &kp K      &kp L    &kp SEMI  &kp SQT
    &kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V                &kp B          &kp N  &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                  &kp LGUI  &spacelayer 3 SPACE  &lt FN SPACE    &mo NAV  &lt NUM SPACE  &kp RALT
)

ZMK_LAYER(FN,
    &kp ESC              &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPS        &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DEL
    &mt LEFT_CONTROL F1  &kp F2           &kp F3       &kp F4    &kp F5      &kp F6         &trans     &kp UNDERSCORE  &kp PLUS   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE
    &mt LEFT_SHIFT F7    &kp F8           &kp F9       &kp F10   &kp F11     &kp F12        &trans     &kp PIPE        &kp PIPE   &kp PIPE              &kp BACKSLASH          &kp ESCAPE
                      &trans    &trans      &trans         &mo SYS      &trans          &trans
)

ZMK_LAYER(NUM,
    &kp GRAVE    &kp N1           &kp N2         &kp N3        &kp N4                &kp N5                   &kp N6     &kp N7     &kp N8     &kp N9    &kp N0         &kp LS(DEL)
    &kp LCTRL    &kp EXCLAMATION  &kp AT         &kp HASH      &kp DOLLAR            &kp PERCENT              &kp MINUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT       &kp PIPE
    &shiftmonum  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp BSLH   &kp UNDER  &kp PLUS   &kp FSLH  &kp BACKSLASH  &trans
                  &trans        &trans                &mo SYS                    &trans     &trans     &trans
)

ZMK_LAYER(NAV,
    &kp ESCAPE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp NUMBER_6  &kp N7          &kp N8         &kp N9       &kp N0     &kp DEL
    &trans      &kp LEFT      &kp DOWN      &kp RIGHT     &kp SPACE     &trans       &trans        &kp LEFT_ARROW  &kp DOWN       &kp UP       &kp RIGHT  &trans
    &trans      &trans        &trans        &trans        &trans        &trans       &trans        &kp END         &kp PAGE_DOWN  &kp PAGE_UP  &kp HOME   &trans
                  &trans        &kp SPACE     &kp SPACE    &trans        &mo NUM           &trans
)

ZMK_LAYER(SYS,
    &trans  &trans  &trans  &trans  &trans  &trans    &kp KP_NUMLOCK   &kp KP_N7        &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans    &kp KP_PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
    &trans  &trans  &trans  &trans  &trans  &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
              &trans  &trans  &trans    &trans           &trans           &trans
)

ZMK_LAYER(UC,
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans            &sys_reset  &trans      &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI
    &kp CAPSLOCK  &bt BT_PRV    &bt BT_NXT    &trans        &trans        &bt BT_CLR        &trans      &bl BL_TOG  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD
    &trans        &trans        &trans        &trans        &trans        &bt BT_CLR_ALL    &trans      &trans      &trans           &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPD
                  &trans        &trans        &trans            &trans      &trans      &trans
)

ZMK_LAYER(MOUSE,
    &trans     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp BSPC
    &kp LCTRL  &trans  &trans  &trans  &trans  &trans    &kp MINUS      &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT      &kp BSLH
    &kp LSHFT  &trans  &trans  &trans  &trans  &trans    &kp LS(UNDER)  &kp LS(PLUS)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(PIPE)  &trans
              &trans  &trans  &trans    &trans         &trans        &trans
)
// &usbd {
// 	status = "okay";
// 	cdc_acm_uart: cdc_acm_uart {
// 		compatible = "zephyr,cdc-acm-uart";
// 		label = "CDC_ACM_0";
// 	};
// };
